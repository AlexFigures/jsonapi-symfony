<?php

declare(strict_types=1);

namespace JsonApi\Symfony\Tests\Integration\PostgreSQL;

use JsonApi\Symfony\Contract\Data\ChangeSet;
use JsonApi\Symfony\Http\Exception\ConflictException;
use JsonApi\Symfony\Http\Exception\NotFoundException;
use JsonApi\Symfony\Tests\Integration\DoctrineIntegrationTestCase;
use JsonApi\Symfony\Tests\Integration\Fixtures\Entity\Article;

final class GenericPersisterTest extends DoctrineIntegrationTestCase
{
    protected function getDatabaseUrl(): string
    {
        return $_ENV['DATABASE_URL_POSTGRES']
            ?? 'postgresql://jsonapi:secret@localhost:5432/jsonapi_test?serverVersion=16&charset=utf8';
    }

    protected function getPlatform(): string
    {
        return 'postgresql';
    }

    public function testCreateArticle(): void
    {
        $changes = new ChangeSet([
            'title' => 'New Article',
            'content' => 'Article content',
        ]);

        $article = $this->persister->create('articles', $changes, 'article-new');

        self::assertSame('article-new', $article->getId());
        self::assertSame('New Article', $article->getTitle());
        self::assertSame('Article content', $article->getContent());

        // Проверяем, что статья сохранена в БД
        $this->em->clear();
        $found = $this->em->find(Article::class, 'article-new');
        self::assertNotNull($found);
        self::assertSame('New Article', $found->getTitle());
    }

    public function testCreateWithAutoGeneratedId(): void
    {
        $changes = new ChangeSet([
            'title' => 'Auto ID Article',
            'content' => 'Content',
        ]);

        $article = $this->persister->create('articles', $changes);

        self::assertNotEmpty($article->getId());
        self::assertSame('Auto ID Article', $article->getTitle());
    }

    public function testCreateThrowsConflictForDuplicateId(): void
    {
        $this->seedDatabase();

        $changes = new ChangeSet([
            'title' => 'Duplicate',
            'content' => 'Content',
        ]);

        $this->expectException(ConflictException::class);
        $this->persister->create('articles', $changes, 'article-1');
    }

    public function testUpdateArticle(): void
    {
        $this->seedDatabase();

        $changes = new ChangeSet([
            'title' => 'Updated Title',
        ]);

        $article = $this->persister->update('articles', 'article-1', $changes);

        self::assertSame('article-1', $article->getId());
        self::assertSame('Updated Title', $article->getTitle());
        self::assertSame('Content of first article', $article->getContent()); // Не изменилось

        // Проверяем в БД
        $this->em->clear();
        $found = $this->em->find(Article::class, 'article-1');
        self::assertSame('Updated Title', $found->getTitle());
    }

    public function testUpdateThrowsNotFoundForNonExistent(): void
    {
        $changes = new ChangeSet(['title' => 'Updated']);

        $this->expectException(NotFoundException::class);
        $this->persister->update('articles', 'non-existent', $changes);
    }

    public function testDeleteArticle(): void
    {
        $this->seedDatabase();

        $this->persister->delete('articles', 'article-1');

        // Проверяем, что статья удалена
        $this->em->clear();
        $found = $this->em->find(Article::class, 'article-1');
        self::assertNull($found);
    }

    public function testDeleteThrowsNotFoundForNonExistent(): void
    {
        $this->expectException(NotFoundException::class);
        $this->persister->delete('articles', 'non-existent');
    }

    public function testTimestampsAreSetAutomatically(): void
    {
        $changes = new ChangeSet([
            'title' => 'Timestamped Article',
            'content' => 'Content',
        ]);

        $article = $this->persister->create('articles', $changes);

        self::assertNotNull($article->getCreatedAt());
        self::assertNull($article->getUpdatedAt());

        // Обновляем
        sleep(1); // Чтобы updatedAt отличался
        $updateChanges = new ChangeSet(['title' => 'Updated']);
        $updated = $this->persister->update('articles', $article->getId(), $updateChanges);

        self::assertNotNull($updated->getUpdatedAt());
        self::assertGreaterThan(
            $updated->getCreatedAt()->getTimestamp(),
            $updated->getUpdatedAt()->getTimestamp()
        );
    }
}

